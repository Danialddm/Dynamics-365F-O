    public OKCOMovementCreatingResponse MvmCreate(OKCOMovementCreatingDataContractReq Params)    
{        DataAreaId   dataAreaId;        OKCOMovementCreatingResponse response = new OKCOMovementCreatingResponse();        container sentObjHeader, sentObjLine;        List lines;        OKCOMovementCreatingLines _OKCOMovementCreatingLines;        ListIterator   literator;        RecordInsertList bulkInsert =  new RecordInsertList(tableNum(InventJournalTrans));         InventJournalTrans inventJournaltrans;        InventDim inventDim;        str errorRun, lineError;        Notes allEntry1,allEntry2;        ;        dataAreaId = Params.parmDataAreaId();        try        {            changecompany(dataAreaId)                                                                                                                                        {                lines = Params.parmrLineClassArray();                //-----grab json to store in db                //OKCOMovementCreatingDataContractReq xppObject = FormJsonSerializer::deserializeObject(classNum(OKCOMovementCreatingDataContractReq),                  //                                      jsonString);                OKCOMovementCreatingDataContractReq strJson = new OKCOMovementCreatingDataContractReq();                //strJson = Params;                //strJson.parmDataAreaId(Params.parmDataAreaId());                //strJson.parmrHeaderClass(Params.parmrHeaderClass()).parmDesc();                //strJson.parmrHeaderClass(Params.parmrHeaderClass()).parmJournalName();                //strJson.parmrLineClassArray(Params.parmrLineClassArray());                //str jsonString = FormJsonSerializer::serializeClass(strJson);                if (lines)                {                    literator = new ListIterator(lines);                    sentObjHeader = OKCOMovementCreatingHelper::movementCreatHeader(lines.elements(),Params.parmrHeaderClass());                                       while (literator.more())                    {                        try                        {                                                        _OKCOMovementCreatingLines = literator.value();                            sentObjLine = OKCOMovementCreatingHelper::movementCreatLine(conPeek(sentObjHeader,1), _OKCOMovementCreatingLines);                            lineError = _OKCOMovementCreatingLines.parmItemId() + '-' + int2Str(_OKCOMovementCreatingLines.parmQty()) + '-' + _OKCOMovementCreatingLines.parmWarehouseId() +                                            '-' + _OKCOMovementCreatingLines.parmLocationId() + '-' +_OKCOMovementCreatingLines.parmActivityNum() + '-' + _OKCOMovementCreatingLines.parmStatusId() +                                            '-' + _OKCOMovementCreatingLines.parmbankAccount() + '-' + _OKCOMovementCreatingLines.parmcustomer() + '-' + _OKCOMovementCreatingLines.parmdepartment() + '-' + _OKCOMovementCreatingLines.parmfixedAsset() +                                            '-' + _OKCOMovementCreatingLines.parmitemGroup() + '-' +_OKCOMovementCreatingLines.parmlocation() + '-' + _OKCOMovementCreatingLines.parmproject() +                                            '-' + _OKCOMovementCreatingLines.parmworker() + '-' + _OKCOMovementCreatingLines.parmBusinessUnit() + '-' + _OKCOMovementCreatingLines.parmCostCenter();                            //grab all entry to store in db                            allEntry2 += lineError + ' ';                            allEntry1 = strFmt('Header: %1  Lines: %2', Params.parmDataAreaId() + '-' + Params.parmrHeaderClass().parmDesc() + '-' + Params.parmrHeaderClass().parmJournalName(), allEntry2);                            //allEntry1 += strFmt('%1 Lines:', lineError);                              inventJournaltrans.clear();                            inventDim.clear();                            inventJournaltrans = conPeek(sentObjLine,1);                            inventDim = conPeek(sentObjLine,2);                            if(inventJournaltrans.validateWrite() && inventDim.validateWrite())//check mandatory fields                                bulkInsert.add(inventJournaltrans);                            else                            {                                                                SysInfologEnumerator s = SysInfologEnumerator::newData(infolog.cut());                                while (s.moveNext())                                {                                    SysInfologMessageStruct strc = new SysInfologMessageStruct(s.currentMessage());                                    Exception exception = s.currentException();                                    errorRun += strfmt('%1--%2',exception, strc.message()) + ' ';                                                                    }                                errorRun = lineError + '-' + errorRun;                                break;                            }                            literator.next();                        }                        catch                        {                                                                                    SysInfologEnumerator s = SysInfologEnumerator::newData(infolog.cut());                            while (s.moveNext())                            {                                SysInfologMessageStruct strc = new SysInfologMessageStruct(s.currentMessage());                                Exception exception = s.currentException();                                errorRun += strfmt('%1--%2', exception, strc.message()) + ' ';                                                            }                            errorRun = lineError + '-' + errorRun;                        }                    }                }                                InventJournalTable inventJournaltable = conPeek(sentObjHeader,1);                                if(inventJournaltable.validateWrite() && inventJournaltrans.validateWrite())// To check the inserting for all header/lines together. check the last inserted line.                {                    ttsbegin;                    inventJournaltable.insert();                    bulkInsert.insertDatabase();                    ttscommit;                    response.journalID(inventJournaltable.JournalId);                    response.ResultResponse("Movement journal is created successfully...");                    OKCOMovementCreatingHelper::logService('Movement journal is created successfully', classStr(OKCOMovementCreatingModelService) + '-' + methodStr(OKCOMovementCreatingModelService,MvmCreate), NoYes::Yes, lines.elements(), inventJournaltable.JournalId, allEntry1);                    return response;                }                else                {                    str errorMsg;                    SysInfologEnumerator s = SysInfologEnumerator::newData(infolog.cut());                    while (s.moveNext())                    {                        SysInfologMessageStruct strc = new SysInfologMessageStruct(s.currentMessage());                        Exception exception = s.currentException();                        errorRun += strfmt('%1--%2', exception, strc.message()) + ' ';                    }                    errorMsg = 'Writing validation failed for lines. Check the entered parameters to be correct values.'+ ' ' + errorRun + ' '+ conPeek(sentObjHeader,2) + ' ' + conPeek(sentObjLine,3);                    response.ResultResponse(errorMsg);                    OKCOMovementCreatingHelper::logService(errorMsg, classStr(OKCOMovementCreatingModelService) + '-' + methodStr(OKCOMovementCreatingModelService,MvmCreate), NoYes::No, 0, '--',allEntry1);                    return response;                }            }        }        catch(Exception::Deadlock)        {            ttsabort;            retry;        }        catch (Exception::Error)        {            ttsabort;            str error;            SysInfologEnumerator s = SysInfologEnumerator::newData(infolog.cut());            while (s.moveNext())            {                SysInfologMessageStruct strc = new SysInfologMessageStruct(s.currentMessage());                Exception exception = s.currentException();                  error += strfmt('%1--%2', exception, strc.message()) + ' ';            }            response.ResultResponse(error);            OKCOMovementCreatingHelper::logService(error, classStr(OKCOMovementCreatingModelService) + '-' + methodStr(OKCOMovementCreatingModelService,MvmCreate), NoYes::No, 0, '--',allEntry1);            return response;        }        catch(Exception::CLRError)        {            ttsAbort;                        System.Exception ex  = CLRInterop::getLastException();            response.ResultResponse(ex.Message);            OKCOMovementCreatingHelper::logService(ex.Message, classStr(OKCOMovementCreatingModelService) + '-' + methodStr(OKCOMovementCreatingModelService,MvmCreate), NoYes::No, 0, '--',allEntry1);            return response;                    
}    
}


--////////////////////////////////////////////////////////////////////Posting movement/////////////////////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
class OKCOMovementPostingModelService //service{    public OKCOMovementPostingResponse MvmPost(OKCOMovementPostingDataContractReq Params)    {        DataAreaId   dataAreaId;        OKCOMovementPostingResponse response = new OKCOMovementPostingResponse();                List headers;        OKCOMovementPostingHeaders _OKCOMovementPostingHeaders;        ListIterator   literator;        Notes jPost, jUnpost, jUnpostError;        InventJournalTable inventJournatable;          int cnt = 0;        Notes errorAll, allEntry;        ;        dataAreaId = Params.parmDataAreaId();        try        {            changecompany(dataAreaId)                                                                                                                                        {                headers = Params.parmrHeaderClassArray();                if (headers)                {                    literator = new ListIterator(headers);                    while (literator.more())                    {                        try                        {                            _OKCOMovementPostingHeaders = literator.value();                            allEntry += strFmt('JournalID: %1',_OKCOMovementPostingHeaders.parmJournalId() + '-');                            //allEntry = strFmt('JournalID: %1', allEntry);                            inventJournatable = InventJournalTable::find(_OKCOMovementPostingHeaders.parmJournalId());                                                    ttsbegin;                            InventJournalCheckPost::newPostJournal(inventJournatable).run();//check and post                            ttscommit;                            jPost += '"' + inventJournatable.JournalId + '"' + " ";                            cnt++;                                                        literator.next();                        }                        catch (Exception::UpdateConflict)                        {                            if (appl.ttsLevel() == 0)                            {                                if (xSession::currentRetryCount() >= 2)                                {                                    ttsabort;                                    throw Exception::UpdateConflictNotRecovered;                                }                                else                                {                                    ttsabort;                                    retry;                                }                            }                            else                            {                                ttsabort;                                throw Exception::UpdateConflict;                            }                        }                        catch(Exception::Deadlock)                        {                            ttsabort;                            retry;                        }                        catch                        {                            ttsabort;                              str errorRun;                            SysInfologEnumerator s = SysInfologEnumerator::newData(infolog.cut());                            while (s.moveNext())                            {                                SysInfologMessageStruct strc = new SysInfologMessageStruct(s.currentMessage());                                Exception exception = s.currentException();                                  errorRun += strfmt('%1--%2', exception, strc.message()) + ' ';                            }                            jUnpost += '"' + inventJournatable.journalId + '"';                            jUnpostError = '"' + inventJournatable.journalId + '"';                            errorAll += jUnpostError + " " + errorRun + "-";                            literator.next();                            continue;                        }                    }                    response.postedJournalID(jPost);                    response.unpostedJournalID(jUnpost);                    if(jPost != '' && jUnpost == '')                    {                        response.ResultResponse('All above mentioned Movement journals are posted successfully.');                        OKCOMovementCreatingHelper::logService('All above mentioned Movement journals are posted successfully.', classStr(OKCOMovementPostingModelService) + '-' + methodStr(OKCOMovementPostingModelService,MvmPost), NoYes::Yes, cnt, jPost, allEntry);                    }                    else if(jPost != '' && jUnpost !='')                    {                        response.ResultResponse('Some of the mentioned Movement journals are posted successfully' + " " + errorAll);                        OKCOMovementCreatingHelper::logService('Some of the mentioned Movement journals are posted successfully.'+ " " + errorAll, classStr(OKCOMovementPostingModelService) + '-' + methodStr(OKCOMovementPostingModelService,MvmPost), NoYes::Yes, cnt, jPost, allEntry);                    }                    else if(jPost == '' && jUnpost != '')                    {                        response.ResultResponse('None of the mentioned Movement journals are posted successfully.'+ " " + errorAll);                        OKCOMovementCreatingHelper::logService('None of the mentioned Movement journals are posted successfully.'+ " " + errorAll, classStr(OKCOMovementPostingModelService) + '-' + methodStr(OKCOMovementPostingModelService,MvmPost), NoYes::No, 0, jUnPost, allEntry);                    }                    else if(jPost == '' && jUnpost == '')                    {                        response.ResultResponse("Please enter the valid parameters value." + " " + errorAll);                        OKCOMovementCreatingHelper::logService('Please enter the valid parameters value.'+ " " + errorAll, classStr(OKCOMovementPostingModelService) + '-' + methodStr(OKCOMovementPostingModelService,MvmPost), NoYes::No, 0, '--', allEntry);                    }                    return response;                                    }                else                {                    str errorMsg;                    errorMsg = 'Check the entered parameters to be correct values.';                    response.ResultResponse(errorMsg);                    OKCOMovementCreatingHelper::logService(errorMsg, classStr(OKCOMovementPostingModelService) + '-' + methodStr(OKCOMovementPostingModelService,MvmPost), NoYes::No, 0, '--', allEntry);                    return response;                }            }        }        catch (Exception::Error)        {            //ttsabort;            str error;            SysInfologEnumerator s = SysInfologEnumerator::newData(infolog.cut());            while (s.moveNext())            {                SysInfologMessageStruct strc = new SysInfologMessageStruct(s.currentMessage());                Exception exception = s.currentException();                  error += strfmt('%1--%2', exception, strc.message()) + ' ';            }            response.ResultResponse(error);            OKCOMovementCreatingHelper::logService(error, classStr(OKCOMovementPostingModelService) + '-' + methodStr(OKCOMovementPostingModelService,MvmPost), NoYes::No, 0, '--', allEntry);            return response;        }        catch(Exception::CLRError)        {            //ttsAbort;                        System.Exception ex  = CLRInterop::getLastException();            response.ResultResponse(ex.Message);            OKCOMovementCreatingHelper::logService(ex.Message, classStr(OKCOMovementPostingModelService) + '-' + methodStr(OKCOMovementPostingModelService,MvmPost), NoYes::No, 0, '--', allEntry);            return response;           }    
}  
}

///////////////////////////////////////////////////////////////Array class request (data contract)/////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
[DataContract]class OKCOMovementCreatingDataContractReq //request  {    private List OKCOMovementCreatingLinesArray;    private OKCOMovementCreatingHeaders OKCOMovementCreatingHeaders;    private DataAreaId dataAreaId;      [DataMemberAttribute("dataAreaId")]    public DataAreaId parmDataAreaId(DataAreaId _value = dataAreaId)    {        if (!prmIsDefault(_value))        {            dataAreaId = _value;        }        return dataAreaId;    }      [DataMember("OKCOMovementCreatingHeaders")]    public OKCOMovementCreatingHeaders parmrHeaderClass(OKCOMovementCreatingHeaders _OKCOMovementCreatingHeaders = OKCOMovementCreatingHeaders)    {        if (!prmIsDefault(_OKCOMovementCreatingHeaders))        {            OKCOMovementCreatingHeaders = _OKCOMovementCreatingHeaders;        }          return OKCOMovementCreatingHeaders;    }      [DataMemberAttribute("OKCOMovementCreatingLines"),    DataCollection(Types::Class, classStr(OKCOMovementCreatingLines)),    AifCollectionTypeAttribute('_OKCOMovementCreatingLinesArray', Types::Class, classStr(OKCOMovementCreatingLines)),    AifCollectionTypeAttribute('return', Types::Class, classStr(OKCOMovementCreatingLines))]    public List parmrLineClassArray(List _OKCOMovementCreatingLinesArray = OKCOMovementCreatingLinesArray)    {        if (!prmIsDefault(_OKCOMovementCreatingLinesArray))        {            OKCOMovementCreatingLinesArray = _OKCOMovementCreatingLinesArray;        }          return OKCOMovementCreatingLinesArray;    }  }

