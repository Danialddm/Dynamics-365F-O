- If you have an issue for callint the RTS, it is red on health check, you should run the retail tenant update tool again using powershell ISE.
- In the tentant update tool ignore server certificate error using "- TrustServerCertificate" at the end of all "sqlcmd"
- After running, if we have an error about job sending or azure blob storage, we should run the retail retarget tool(for running we should add -trustedcertificate to all section).
- If its needed to start azure blob storage--> C:\Program Files (x86)\Microsoft SDKs\Azure\Storage Emulator
////////////////////////////////////////////////////retarget file with some changes for server certificate/////////////////////////////////////
 <#

SAMPLE CODE NOTICE

 

THIS SAMPLE CODE IS MADE AVAILABLE AS IS.  MICROSOFT MAKES NO WARRANTIES, WHETHER EXPRESS OR IMPLIED,

OF FITNESS FOR A PARTICULAR PURPOSE, OF ACCURACY OR COMPLETENESS OF RESPONSES, OF RESULTS, OR CONDITIONS OF MERCHANTABILITY.  

THE ENTIRE RISK OF THE USE OR THE RESULTS FROM THE USE OF THIS SAMPLE CODE REMAINS WITH THE USER.  

NO TECHNICAL SUPPORT IS PROVIDED.  YOU MAY NOT DISTRIBUTE THIS CODE UNLESS YOU HAVE A LICENSE AGREEMENT WITH MICROSOFT THAT ALLOWS YOU TO DO SO.

#>

 

param(

   [string]$aosWebsiteName = 'AOSService',

   [string]$retailServerWebsiteName = 'RetailServer',

   [string]$retailCloudPosWebsiteName = 'RetailCloudPos',

   [string]$targetDataGroupName = 'Default',

   [string]$targetDatabaseProfileName = '',

   [string]$targetRtsProfileName = '',

   [string]$logFile = 'RetargetRetailServer.log'

)

 

function Test-RetailRTSProfile

{

   param([hashtable]$settings,

       [string] $targetRtsProfileName

   )

   

   if(![String]::IsNullOrWhiteSpace($targetRtsProfileName))

   {

       $rtsProfileQuery = "SELECT * FROM RETAILTRANSACTIONSERVICEPROFILE WHERE [NAME] = '$targetRtsProfileName' "

       $rtsProfiles = Invoke-SqlCmd -ServerInstance $settings.AosDatabaseServer `

                                    -Database $settings.AosDatabaseName `

                                    -Username $settings.AosDatabaseUser `

                                    -Password $settings.AosDatabasePass `

                                    -Query $rtsProfileQuery -ErrorAction Stop -TrustServerCertificate//this one

       

       if($rtsProfiles -eq $null)

       {

           throw "Cannot find Retail RTS profile with name $targetRtsProfileName. Please work with support team to create the right profile record."

       }

   }

   else # No RTS profile name is passed, try to find one.

   {

       $targetRtsProfileName = 'Default'

       $rtsProfileQuery = "SELECT * FROM RETAILTRANSACTIONSERVICEPROFILE WHERE [NAME] = '$targetRtsProfileName' "

       $rtsProfiles = Invoke-SqlCmd -ServerInstance $settings.AosDatabaseServer `

                                    -Database $settings.AosDatabaseName `

                                    -Username $settings.AosDatabaseUser `

                                    -Password $settings.AosDatabasePass `

                                    -Query $rtsProfileQuery -ErrorAction Stop -TrustServerCertificate

       

       if($rtsProfiles -ne $null)

       {

           Log-TimedMessage "Found Default RTS profile, will use it."

       }

       else

       {

           Log-TimedMessage "Didn't find the Default RTS profile."

           

           $rtsProfileQuery = "SELECT count(*) AS [COUNT], MAX([NAME]) AS [NAME] FROM RETAILTRANSACTIONSERVICEPROFILE "

           $rtsProfiles = Invoke-SqlCmd -ServerInstance $settings.AosDatabaseServer `

                                        -Database $settings.AosDatabaseName `

                                        -Username $settings.AosDatabaseUser `

                                        -Password $settings.AosDatabasePass `

                                        -Query $rtsProfileQuery -ErrorAction Stop -TrustServerCertificate

           

           if($rtsProfiles.COUNT -eq 0)

           {

               throw "No RTS profile found, please check the Retail system is configured correctly. Please work with support team to create the right profile record."

           }

           elseif($rtsProfiles.COUNT -eq 1)

           {

               $targetRtsProfileName = $rtsProfiles.NAME

               Log-TimedMessage "Get only 1 RTS profile, will use this one $targetRtsProfileName"

           }

           else

           {

               # use column ISCUSTOMERRECORD to identify the system RTS profile, but this column only available in later releases,check the existence before trying with this approach.

               $rtsProfileQuery = "SELECT * FROM INFORMATION_SCHEMA.COLUMNS where TABLE_SCHEMA = 'dbo' AND TABLE_NAME = 'RETAILTRANSACTIONSERVICEPROFILE' AND COLUMN_NAME = 'ISCUSTOMERRECORD'"

               $rtsProfiles = Invoke-SqlCmd -ServerInstance $settings.AosDatabaseServer `

                                            -Database $settings.AosDatabaseName `

                                            -Username $settings.AosDatabaseUser `

                                            -Password $settings.AosDatabasePass `

                                            -Query $rtsProfileQuery -ErrorAction Stop -TrustServerCertificate

               

               if($rtsProfiles -ne $null) # RETAILTRANSACTIONSERVICEPROFILE contains ISCUSTOMERRECORD column, use it to identify the default profile.

               {

                   $rtsProfileQuery = "SELECT TOP 1 [NAME] FROM RETAILTRANSACTIONSERVICEPROFILE WHERE ISCUSTOMERRECORD = 0 "

                   $rtsProfiles = Invoke-SqlCmd -ServerInstance $settings.AosDatabaseServer `

                                                -Database $settings.AosDatabaseName `

                                                -Username $settings.AosDatabaseUser `

                                                -Password $settings.AosDatabasePass `

                                                -Query $rtsProfileQuery -ErrorAction Stop -TrustServerCertificate

                   if($rtsProfiles -ne $null)

                   {

                       $targetRtsProfileName = $rtsProfiles.NAME

                       Log-TimedMessage "Get system created RTS profile, will use this one $targetRtsProfileName"

                   }

                   else

                   {

                       throw "Cannot find system created RTS profile, Please work with support team to create the right profile record."

                   }

               }

           }

       }

   }

   

   $settings.targetRtsProfileName = $targetRtsProfileName

}

 

function Test-RetailDatabaseProfile

{

   param([hashtable]$settings,

       [string] $targetDatabaseProfileName

   )

   

   if(![String]::IsNullOrWhiteSpace($targetDatabaseProfileName))

   {

       $databaseProfileQuery = "SELECT * FROM RETAILCONNDATABASEPROFILE WHERE [NAME] = '$targetDatabaseProfileName' "

       $databaseProfiles = Invoke-SqlCmd -ServerInstance $settings.AosDatabaseServer `

                                         -Database $settings.AosDatabaseName `

                                         -Username $settings.AosDatabaseUser `

                                         -Password $settings.AosDatabasePass `

                                         -Query $databaseProfileQuery -ErrorAction Stop -TrustServerCertificate

       

       if($databaseProfiles -eq $null)

       {

           throw "Cannot find Retail channel database profile with name $targetDatabaseProfileName. Please work with support team to create the right profile record."

       }

   }

   else # No channel database profile name is passed, try to find one.

   {

       $targetDatabaseProfileName = 'Default'

       $databaseProfileQuery = "SELECT * FROM RETAILCONNDATABASEPROFILE WHERE [NAME] = '$targetDatabaseProfileName' "

       $databaseProfiles = Invoke-SqlCmd -ServerInstance $settings.AosDatabaseServer `

                                         -Database $settings.AosDatabaseName `

                                         -Username $settings.AosDatabaseUser `

                                         -Password $settings.AosDatabasePass `

                                         -Query $databaseProfileQuery -ErrorAction Stop -TrustServerCertificate

       

       if($databaseProfiles -ne $null)

       {

           Log-TimedMessage "Found Default channel database, will use it."

       }

       else

       {

           Log-TimedMessage "Didn't find the Default channel database profile."

           

           $databaseProfileQuery = "SELECT count(*) AS [COUNT], MAX([NAME]) AS [NAME] FROM RETAILCONNDATABASEPROFILE "

           $databaseProfiles = Invoke-SqlCmd -ServerInstance $settings.AosDatabaseServer `

                                             -Database $settings.AosDatabaseName `

                                             -Username $settings.AosDatabaseUser `

                                             -Password $settings.AosDatabasePass `

                                             -Query $databaseProfileQuery -ErrorAction Stop -TrustServerCertificate

           

           if($databaseProfiles.COUNT -eq 0)

           {

               throw "No channel database profile found, Please work with support team to create the right profile record."

           }

           elseif($databaseProfiles.COUNT -eq 1)

           {

               $targetDatabaseProfileName = $databaseProfiles.NAME

               Log-TimedMessage "Get only 1 channel database profile, will use this one $targetDatabaseProfileName"

           }

           else

           {

               Log-TimedMessage "More than 1 channel database profiles found, will try to find the default database profile without SERVER and DATABASE_ property."

               

               $databaseProfileQuery = "SELECT TOP 1 [NAME] FROM RETAILCONNDATABASEPROFILE WHERE LEN(DATABASE_) = 0 AND [SERVER] = 0 ORDER BY RECID DESC "

               $databaseProfiles = Invoke-SqlCmd -ServerInstance $settings.AosDatabaseServer `

                                                 -Database $settings.AosDatabaseName `

                                                 -Username $settings.AosDatabaseUser `

                                                 -Password $settings.AosDatabasePass `

                                                 -Query $databaseProfileQuery -ErrorAction Stop -TrustServerCertificate

               if($databaseProfiles -ne $null)

               {

                   $targetDatabaseProfileName = $databaseProfiles.NAME

                   Log-TimedMessage "Get system created channel database profile, will use this one $targetDatabaseProfileName"

               }

               else

               {

                   throw "Cannot find system created channel database profile, Please work with support team to create the right profile record."

               }

           }

       }

   }

   

   $settings.targetDatabaseProfileName = $targetDatabaseProfileName

}

 

function Restore-DatabaseUsers

{

   param([hashtable]$settings,

       [hashtable]$retailUsersToEnsure

   )

   

   foreach($user in $retailUsersToEnsure.Keys)

   {

       $password = $retailUsersToEnsure[$user]

       $queryToEnsureUser = "

           DECLARE @isSqlAzure BIT

           SELECT @isSqlAzure = 0

           

           if (CHARINDEX('SQL Azure',@@VERSION) > 0)

           BEGIN

               SELECT @isSqlAzure = 1

           END

           

           IF (@isSqlAzure = 0) -- Handle non SQL Azure

           BEGIN

               -- Create login if not exists

               IF NOT EXISTS(SELECT 1 FROM dbo.syslogins WHERE [NAME] = '{0}')

               BEGIN

                   CREATE LOGIN {0} WITH PASSWORD = '{1}'

               END

               

               -- Create user from the login

               IF NOT EXISTS (SELECT 1 FROM [sys].[sysusers] WHERE [NAME] = '{0}' AND issqluser = 1)

               BEGIN

                   CREATE USER {0} FOR LOGIN {0}

               END

               

               ALTER LOGIN {0} WITH PASSWORD = '{1}'

               

               -- Reassociate user and login

               EXEC sp_change_users_login 'Update_One', '{0}', '{0}'

           

           END

           ELSE -- Handle SQL Azure

           BEGIN

               -- We are not creating login in SQL Azure because we don't have permissions and it is supposed to be done at earlier deployment stage.

               

               -- In SQL Azure, user is only stored in current database, but we need to update the password with current value in case the database is restored from another instance

               IF EXISTS(SELECT * FROM DBO.SYSUSERS WHERE [NAME] = '{0}')

               BEGIN

                   ALTER USER {0} WITH PASSWORD = '{1}'

               END

               ELSE

               BEGIN

                   CREATE USER {0} WITH PASSWORD = '{1}'

               END

           END " -f $user, $password

       Log-TimedMessage ('Ensure user {0}' -f $user)

       try

       {

           Invoke-SqlCmd -ServerInstance $settings.AosDatabaseServer `

                         -Database $settings.AosDatabaseName `

                         -Username $settings.AosDatabaseUser `

                         -Password $settings.AosDatabasePass `

                         -Query $queryToEnsureUser -ErrorAction Stop -TrustServerCertificate

       }

       catch

       {

           $errorMsg = "Error when trying to update user $user in database because the user is broken, please recreate this user in database with the right permission and try again. Detail document are available here: https://go.microsoft.com/fwlink/?linkid=854762"

           $errorMsg += ($global:error[0] | format-list * -f | Out-String)

           $PSBoundParameters.Keys | % { $errorMsg += "Parameter: {0} Value: {1}{2}" -f $_.ToString(), $PSBoundParameters[$_.ToString()], [System.Environment]::NewLine}

           Log-TimedMessage $errorMsg

           throw $errorMsg

       }

   }

}

 

<#

.Synopsis

 Test whether Retail is configured in this environment or not.

 

.Description

 This will test whether Retail is configured in this environment or not.

 If Retail RTS profile doesn't exist of Retail database profile doesn't exist, it will return $false indicating Retail is not configured at all.

#>

function Test-RetailConfigured

{

   param(

       [string] $AosDatabaseServer,

       [string] $AosDatabaseName,

       [string] $AosDatabaseUser,

       [string] $AosDatabasePass

   )

   

   $rtsProfileQuery = "SELECT * FROM RETAILTRANSACTIONSERVICEPROFILE "

   $rtsProfiles = Invoke-SqlCmd -ServerInstance $AosDatabaseServer -Database $AosDatabaseName -Username $AosDatabaseUser -Password $AosDatabasePass -Query $rtsProfileQuery -TrustServerCertificate

 

   $databaseProfileQuery = "SELECT * FROM RETAILCONNDATABASEPROFILE "

   $databaseProfiles = Invoke-SqlCmd -ServerInstance $AosDatabaseServer -Database $AosDatabaseName -Username $AosDatabaseUser -Password $AosDatabasePass -Query $databaseProfileQuery -TrustServerCertificate

 

   if(($rtsProfiles -eq $null) -or ($databaseProfiles -eq $null))

   {

       return $false

   }

   

   return $true

}

 

<#

.Synopsis

 Update OnHold jobs and Waiting jobs to Finished to avoid issues during retargeting.

 

.Description

 Update OnHold jobs and Waiting jobs to Finished to avoid issues during retargeting.

#>

function Disable-PendingBatchJobs

{

   param(

       [string] $AosDatabaseServer,

       [string] $AosDatabaseName,

       [string] $AosDatabaseUser,

       [string] $AosDatabasePass

   )

   

   Log-TimedMessage "Disable batch job records with Status OnHold or Waiting. There is an known bug in retargeting X++ code that it deletes BatchJobs with status OnHold or Waiting. X++ hot fix is released but if the current environment doesn't have the hot fix, this script fix will help to address this issue "

   

   Log-TimedMessage "Below BatchJobs are going to be updated."

   $targetBatchJobsQuery = "SELECT * FROM BATCHJOB  WHERE STATUS IN (0,1) "

   $result = Invoke-SqlCmd -ServerInstance $AosDatabaseServer -Database $AosDatabaseName -Username $AosDatabaseUser -Password $AosDatabasePass -Query $targetBatchJobsQuery -TrustServerCertificate

   $result | Format-Table | Out-String | Write-Host

   

   Log-TimedMessage "Updating BatchJob records."

   # BatchStatus, 8 = Canceled, 0 = Hold, 1 = Waiting.

   $updateBatchJobsQuery = "UPDATE BATCHJOB SET STATUS = 8 WHERE STATUS IN (0,1) "

   Invoke-SqlCmd -ServerInstance $AosDatabaseServer -Database $AosDatabaseName -Username $AosDatabaseUser -Password $AosDatabasePass -Query $updateBatchJobsQuery -TrustServerCertificate

}

 

#try

#{

   $ErrorActionPreference = 'Stop'    

       

   $scriptDir = Split-Path -parent $PSCommandPath

 

   . "$scriptDir\Common-Configuration.ps1"

   . "$scriptDir\Common-Web.ps1"

   . "$scriptDir\Common-Upgrade.ps1"

 

   Import-Module (Join-Path -Path $scriptDir -ChildPath 'Common-Servicing.psm1') -DisableNameChecking

   Import-Module (Join-Path -Path $scriptDir -ChildPath 'CommonRollbackUtilities.psm1') -DisableNameChecking

   Import-Module (Join-Path -Path $scriptDir -ChildPath 'SelfServiceConfiguration.psm1') -DisableNameChecking

 

   Log-TimedMessage "Retargeting Retail. Last Updated Date: 2017-11-06."

 

   $serviceModelName = 'RetailServer'  

   

   $retailServerWebSite = Get-WebSiteSafe -Name $retailServerWebsiteName

   

   if($retailServerWebSite -eq $null)

   {

       throw "Cannot find retail website with name $retailServerWebsiteName, please make sure this enviornment is deployed correctly."

   }

   

   & aspnet_regiis -pd "connectionStrings" -app "/" -Site $retailServerWebSite.Id

 

   $retailServerWebsitePhysicalPath = $retailServerWebSite.physicalPath

   $retailServerWebConfigFilePath = (Join-Path $retailServerWebsitePhysicalPath 'web.config')

 

   # decrypt retail server web.config with Microsoft.Dynamics.AX.Framework.ConfigEncryptor.exe

   Decrypt-WithAxConfigEncryptorUtility -AosWebsiteName $AosWebsiteName -webConfigPath $retailServerWebConfigFilePath

   

   [xml]$retailServerWebConfigDoc = Get-Content -Path $retailServerWebConfigFilePath

 

   $appSettingSqlAdminUserElement = $retailServerWebConfigDoc.SelectSingleNode("/configuration/appSettings/add[@key='DataAccess.AxAdminSqlUser']")

   if($appSettingSqlAdminUserElement -eq $null)

   {

       throw "Retail servicing data is not present in the RetailServer web.config, please update it before running retargeting tool. Detail instructions are avaiable here: https://microsoft.sharepoint.com/:o:/r/teams/AXServiceOps/_layouts/15/WopiFrame.aspx?sourcedoc={ae57632e-2f94-415f-ab2a-3625cdc42ca6}&action=edit&wd=target%28Troubleshooting%20Guide%2Eone%7C6301B9E7%2D0E72%2D43CF%2DB29A%2DD2F076D3F2D6%2FUpdate%20Retail%20Servicing%20Data%20for%20JIT%7CA53DADEA%2DF544%2D4ADC%2D916D%2D6EBB9A633F31%2F%29onenote%3Ahttps%3A%2F%2Fmicrosoft%2Esharepoint%2Ecom%2Fteams%2FAXServiceOps%2FShared%20Documents%2FOperations%20Handbook%2FFeature%20guide%2FRetail%2FTroubleshooting%20Guide%2Eone#Update%20Retail%20Servicing%20Data%20for%20JIT&section-id={6301B9E7-0E72-43CF-B29A-D2F076D3F2D6}&page-id={A53DADEA-F544-4ADC-916D-6EBB9A633F31}&end."

   }

 

   Log-TimedMessage "Retail servicing data exists in retail server web.config."

   # To be compatible with the legacy code, use Get-AxDatabaseUserFromWebConfig to extract the database information from web.config.

   $websiteConnectionStringSettings = Get-AxDatabaseUserFromWebConfig -webConfig $retailServerWebConfigDoc -dbUserKey 'DataAccess.AxAdminSqlUser' -dbUserPasswordKey 'DataAccess.AxAdminSqlPwd'

   $deployDbSetting = Create-WebSiteDBConfiguration -connectionString $websiteConnectionStringSettings

   

   $appSettingSqlUserElement = $retailServerWebConfigDoc.SelectSingleNode("/configuration/appSettings/add[@key='DataAccess.SqlUser']")

   

   if($appSettingSqlUserElement -ne $null)

   {

       Log-TimedMessage "axdeployextuser exists, extract the information."

       $extUserConnectionStringSettings = Get-AxDatabaseUserFromWebConfig -webConfig $retailServerWebConfigDoc -dbUserKey 'DataAccess.SqlUser' -dbUserPasswordKey 'DataAccess.SqlPwd'

       $extUserSetting = Create-WebSiteDBConfiguration -connectionString $extUserConnectionStringSettings

   }

   else

   {

       Log-TimedMessage "axdeployextuser doesn't exist, this is expected in 7.0,7.1 releases."

   }

 

   $retailChannelDBConnectionString = $retailServerWebConfigDoc.SelectSingleNode("/configuration/connectionStrings/add[@name='StorageLookupDatabase']").connectionString

   $channelDbSetting = Create-WebSiteDBConfiguration -connectionString $retailChannelDBConnectionString   

 

   [hashtable]$settings = @{}

   $settings.targetDataGroupName = $targetDataGroupName

   $settings.targetDatabaseProfileName = $targetDatabaseProfileName

   $settings.targetRtsProfileName = $targetRtsProfileName

   $settings.AosDatabaseServer = $deployDbSetting.server

   $settings.AosDatabaseName = $deployDbSetting.database

   $settings.AosDatabaseUser = $deployDbSetting.sqlUserName

   $settings.AosDatabasePass = $deployDbSetting.sqlUserPassword

   $settings.ChannelDatabaseServer = $channelDbSetting.server

   $settings.ChannelDatabaseName = $channelDbSetting.database

   $settings.ChannelDatabaseUser = $channelDbSetting.sqlUserName

   $settings.ChannelDatabasePass = $channelDbSetting.sqlUserPassword

   $settings.ChannelDatabaseDataSyncUser = 'axretaildatasyncuser'

   $settings.ChannelDatabaseDataSyncPass = $channelDbSetting.sqlUserPassword

   $settings.DisableDBServerCertificateValidation = $channelDbSetting.trustservercertificate

   

   if($extUserSetting -ne $null)

   {

       $settings.AxDeployExtUser = $extUserSetting.sqlUserName

       $settings.AxDeployExtUserPassword = $extUserSetting.sqlUserPassword

   }

   

   # Check whether Retail is configured or not, if Retail is not configured, skip Retargeting

   Log-TimedMessage "Checking Retail is configured in this environment or not."

   if(-not(Test-RetailConfigured -AosDatabaseServer $settings.AosDatabaseServer -AosDatabaseName $settings.AosDatabaseName -AosDatabaseUser $settings.AosDatabaseUser -AosDatabasePass $settings.AosDatabasePass))

   {

       Log-TimedMessage "Retail is not configured, no RTS profile or database profile was found in this environment, will return now to skip the retargeting process."

       return;

   }

   

   # Validate RTS profile

   Log-TimedMessage "Validating Retail RTS profile."

   Test-RetailRTSProfile -settings $settings -targetRtsProfileName $targetRtsProfileName

   

   # Validate channel database profile

   Log-TimedMessage "Validating Retail database profile."

   Test-RetailDatabaseProfile -settings $settings -targetDatabaseProfileName $targetDatabaseProfileName

   

   # Update all batch job to canceled for retargeting process.    

   Disable-PendingBatchJobs -AosDatabaseServer $settings.AosDatabaseServer -AosDatabaseName $settings.AosDatabaseName -AosDatabaseUser $settings.AosDatabaseUser -AosDatabasePass $settings.AosDatabasePass

 

   $settings.HardwareStationAppInsightsInstrumentationKey = $retailServerWebConfigDoc.configuration.environment.instrumentation.hardwareStationAppinsightsKey

   $settings.ClientAppInsightsInstrumentationKey = $retailServerWebConfigDoc.configuration.environment.instrumentation.clientAppinsightsKey

   $settings.EnvironmentId = $retailServerWebConfigDoc.configuration.environment.id

   $settings.TenantId = $retailServerWebConfigDoc.configuration.environment.tenant.id

   

   $retailUsersToEnsure = @{$settings.ChannelDatabaseUser = $settings.ChannelDatabasePass;

                            $settings.ChannelDatabaseDataSyncUser = $settings.ChannelDatabaseDataSyncPass}

 

   Restore-DatabaseUsers -settings $settings -retailUsersToEnsure $retailUsersToEnsure

 

   $settings.AosUrl = (Get-AosUrl -aosWebsiteName $aosWebsiteName)

   $settings.AosSoapUrl = (Get-AosSoapUrl -aosWebsiteName $aosWebsiteName)

   $settings.RetailServerUrlValue = ([array](Get-WebSiteBindingUrls -websiteName $retailServerWebsiteName))[0]

   $settings.CloudPOSUrl = ([array](Get-WebSiteBindingUrls -websiteName $retailCloudPosWebsiteName))[0]

   

   # Derive AOS web config file path.

   $aosWebsite = Get-WebSiteSafe -Name $aosWebsiteName

   $aosWebsitePhysicalPath = $aosWebsite.physicalPath

   $aosWebConfigFilePath = (Join-Path $aosWebsitePhysicalPath 'web.config')

   Log-TimedMessage ('AOS web.config located at:{0}{1}' -f [System.Environment]::NewLine, $aosWebConfigFilePath)

 

   Configure-AxDeploymentUtility -aosWebConfigFilePath $aosWebConfigFilePath -AOSWebsitePhysicalPath $aosWebsitePhysicalPath    

 

   # Get file path to AX deployment setup utility and its config file.

   $AXDeploymentSetupUtilityFilePath = Get-AXDeploymentUtilityFilesPath -AOSWebsitePhysicalPath $aosWebsitePhysicalPath -UtilityFileName $AxDeploymentSetUpExeName

   Log-TimedMessage ('{0} located at:{1}{2}' -f $AxDeploymentSetUpExeName, [System.Environment]::NewLine, $AXDeploymentSetupUtilityFilePath)

 

   $aosWebConfigContent = [xml](Get-Content -Path $aosWebConfigFilePath)

   $identityProvider = Get-WebConfigAppSetting -WebConfig $aosWebConfigContent -SettingName 'Provisioning.AdminIdentityProvider'

   if (-not $identityProvider)

   {

       throw 'Cound not read identityProvider from AOS web.config'

   }

   $settings.IdentityProvider = $identityProvider

 

   $selfServiceLocationRegistryPath = 'HKLM:\SOFTWARE\Microsoft\Dynamics\7.0\RetailSelfService\Servicing'

   

   Log-TimedMessage "Checking $selfServiceLocationRegistryPath for app insights keys."

   if(Test-Path -Path $selfServiceLocationRegistryPath)

   {

       Log-TimedMessage "Retail Servicing registry key $selfServiceLocationRegistryPath found, using app insights keys from registry."

       

       $settings.CloudPosAppInsightsInstrumentationKey = Get-ItemProperty -Path $selfServiceLocationRegistryPath | Select-Object -ExpandProperty  'CloudPosAppInsightsInstrumentationKey' -ErrorAction Ignore

       $settings.RetailServerAppInsightsInstrumentationKey = Get-ItemProperty -Path $selfServiceLocationRegistryPath | Select-Object -ExpandProperty  'RetailServerAppInsightsInstrumentationKey' -ErrorAction Ignore

       $settings.AsyncClientAppInsightsInstrumentationKey = Get-ItemProperty -Path $selfServiceLocationRegistryPath | Select-Object -ExpandProperty  'AsyncClientAppInsightsInstrumentationKey' -ErrorAction Ignore

       $settings.WindowsPhoneAppInsightsInstrumentationKey = Get-ItemProperty -Path $selfServiceLocationRegistryPath | Select-Object -ExpandProperty  'WindowsPhoneAppInsightsInstrumentationKey' -ErrorAction Ignore

       $settings.AsyncServerConnectorServiceAppInsightsInstrumentationKey = Get-ItemProperty -Path $selfServiceLocationRegistryPath | Select-Object -ExpandProperty  'AsyncServerConnectorServiceAppInsightsInstrumentationKey' -ErrorAction Ignore

       $settings.RealtimeServiceAX63AppInsightsInstrumentationKey = Get-ItemProperty -Path $selfServiceLocationRegistryPath | Select-Object -ExpandProperty  'RealtimeServiceAX63AppInsightsInstrumentationKey' -ErrorAction Ignore

       

       Log-TimedMessage "Done with extracting app insights keys from registry."

   }

   else # Try to get value from database

   {

       Log-TimedMessage "Retail Servicing registry key $selfServiceLocationRegistryPath not found, using app insights keys from table RETAILSHAREDPARAMETERS in database."

       

       $settings.WindowsPhoneAppInsightsInstrumentationKey = $retailServerWebConfigDoc.configuration.environment.instrumentation.windowsPhonePosAppInsightsKey

       

       $retailParametersQuery = "select TOP 1 * from RETAILSHAREDPARAMETERS "

       $retailParameters = Invoke-SqlCmd -ServerInstance $settings.AosDatabaseServer `

                                         -Database $settings.AosDatabaseName `

                                         -Username $settings.AosDatabaseUser `

                                         -Password $settings.AosDatabasePass `

                                         -Query $retailParametersQuery -ErrorAction Stop -TrustServerCertificate

       

       if($retailParameters -ne $null)

       {

           Log-TimedMessage "Update app insight keys to $selfServiceLocationRegistryPath for future use."

           

           $settings.CloudPosAppInsightsInstrumentationKey = $retailParameters.CLOUDPOSAPPINSIGHTSINSTRUMENTATIONKEY

           $settings.RetailServerAppInsightsInstrumentationKey = $retailParameters.RETAILSERVERAPPINSIGHTSINSTRUMENTATIONKEY

           $settings.AsyncClientAppInsightsInstrumentationKey = $retailParameters.ASYNCCLIENTAPPINSIGHTSINSTRUMENTATIONKEY

           $settings.WindowsPhoneAppInsightsInstrumentationKey = $retailParameters.WINDOWSPHONEAPPINSIGHTSINSTRUMENTATIONKEY

           $settings.AsyncServerConnectorServiceAppInsightsInstrumentationKey = $retailParameters.ASYNCSERVERCONNECTORSERVICEAPPINSIGHTSINSTRUMENTATIONKEY

           $settings.RealtimeServiceAX63AppInsightsInstrumentationKey = $retailParameters.REALTIMESERVICEAX63APPINSIGHTSINSTRUMENTATIONKEY

           

           # Restore registry keys for future use

           New-Item -Path $selfServiceLocationRegistryPath -ItemType Directory -Force

           New-ItemProperty -Path $selfServiceLocationRegistryPath -Name 'IdentityProvider' -Value $settings.IdentityProvider | Out-Null

           New-ItemProperty -Path $selfServiceLocationRegistryPath -Name 'EnvironmentId' -Value $settings.EnvironmentId | Out-Null

           New-ItemProperty -Path $selfServiceLocationRegistryPath -Name 'TenantId' -Value $settings.TenantId | Out-Null

           New-ItemProperty -Path $selfServiceLocationRegistryPath -Name 'ClientAppInsightsInstrumentationKey' -Value $settings.ClientAppInsightsInstrumentationKey | Out-Null

           New-ItemProperty -Path $selfServiceLocationRegistryPath -Name 'HardwareStationAppInsightsInstrumentationKey' -Value $settings.HardwareStationAppInsightsInstrumentationKey | Out-Null

           New-ItemProperty -Path $selfServiceLocationRegistryPath -Name 'CloudPosAppInsightsInstrumentationKey' -Value $settings.CloudPosAppInsightsInstrumentationKey | Out-Null

           New-ItemProperty -Path $selfServiceLocationRegistryPath -Name 'RetailServerAppInsightsInstrumentationKey' -Value $settings.RetailServerAppInsightsInstrumentationKey | Out-Null

           New-ItemProperty -Path $selfServiceLocationRegistryPath -Name 'AsyncClientAppInsightsInstrumentationKey' -Value $settings.AsyncClientAppInsightsInstrumentationKey | Out-Null

           New-ItemProperty -Path $selfServiceLocationRegistryPath -Name 'WindowsPhoneAppInsightsInstrumentationKey' -Value $settings.WindowsPhoneAppInsightsInstrumentationKey | Out-Null

           New-ItemProperty -Path $selfServiceLocationRegistryPath -Name 'AsyncServerConnectorServiceAppInsightsInstrumentationKey' -Value $settings.AsyncServerConnectorServiceAppInsightsInstrumentationKey | Out-Null

           New-ItemProperty -Path $selfServiceLocationRegistryPath -Name 'RealtimeServiceAX63AppInsightsInstrumentationKey' -Value $settings.RealtimeServiceAX63AppInsightsInstrumentationKey | Out-Null

       }

       

       Log-TimedMessage "Done with extracting app insights keys from database."

   }

   

   $aadRealm = Get-WebConfigAppSetting -WebConfig $aosWebConfigContent -SettingName 'Aad.Realm'

   if (-not $aadRealm)

   {

       throw 'Cound not read aadRealm from AOS web.config'

   }

 

   $AosAdminUserId = Get-WebConfigAppSetting -WebConfig $aosWebConfigContent -SettingName 'Provisioning.AdminPrincipalName'

   if (-not $AosAdminUserId)

   {

       throw 'Cound not read Provisioning.AdminPrincipalName from AOS web.config'

   }

   $settings.AosAdminUserId = $AosAdminUserId

   $settings.UserId = 'RetailServerSystemAccount@dynamics.com'

 

   $settings.RetailServerUrl =  ('{0}/Commerce' -f $settings.RetailServerUrlValue)

   $settings.MediaServerUrl = ('{0}/MediaServer' -f $settings.RetailServerUrlValue)

 

   $methodInputXmlFilePath = [System.IO.Path]::GetTempFileName();

 

   Log-TimedMessage "Method input xml file is located in $methodInputXmlFilePath"

 

   $configureAsyncServiceSection =

   "<ChannelDatabaseServer>$($settings.ChannelDatabaseServer)</ChannelDatabaseServer>

   <ChannelDatabaseName>$($settings.ChannelDatabaseName)</ChannelDatabaseName>

   <ChannelDatabaseUser>$($settings.ChannelDatabaseDataSyncUser)</ChannelDatabaseUser>

   <ChannelDatabasePass>$($settings.ChannelDatabaseDataSyncPass)</ChannelDatabasePass>

   <DataGroupName>$($settings.targetDataGroupName)</DataGroupName>

   <DataGroupDescription>Default data group</DataGroupDescription>

   <DatabaseProfileName>$($settings.targetDatabaseProfileName)</DatabaseProfileName>

   <TrustServerCertificate>$($settings.DisableDBServerCertificateValidation)</TrustServerCertificate>"

 

   $configureRealTimeServiceSection =

   "<AosUrl>$($settings.AosUrl)</AosUrl>

   <AosSoapUrl>$($settings.AosSoapUrl)</AosSoapUrl>

   <IdentityProvider>$($settings.IdentityProvider)</IdentityProvider>

   <UserId>$($settings.UserId)</UserId>

   <AosAdminUserId>$($settings.AosAdminUserId)</AosAdminUserId>

   <RtsProfileId>$($settings.targetRtsProfileName)</RtsProfileId>

   <TenantId>$($settings.TenantId)</TenantId>"

 

   $configureChannelProfileSection =

   "<RetailChannelProfileName>Default</RetailChannelProfileName>

   <RetailServerUrl>$($settings.RetailServerUrl)</RetailServerUrl>

   <MediaServerUrl>$($settings.MediaServerUrl)</MediaServerUrl>

   <CloudPOSUrl>$($settings.CloudPOSUrl)</CloudPOSUrl>"

   

   $configureSelfServiceSection =

   "<EnvironmentId>$($settings.EnvironmentId)</EnvironmentId>

   <ClientAppInsightsInstrumentationKey>$($settings.ClientAppInsightsInstrumentationKey)</ClientAppInsightsInstrumentationKey>

   <HardwareStationAppInsightsInstrumentationKey>$($settings.HardwareStationAppInsightsInstrumentationKey)</HardwareStationAppInsightsInstrumentationKey>

   <CloudPosAppInsightsInstrumentationKey>$($settings.CloudPosAppInsightsInstrumentationKey)</CloudPosAppInsightsInstrumentationKey>

   <RetailServerAppInsightsInstrumentationKey>$($settings.RetailServerAppInsightsInstrumentationKey)</RetailServerAppInsightsInstrumentationKey>

   <AsyncClientAppInsightsInstrumentationKey>$($settings.AsyncClientAppInsightsInstrumentationKey)</AsyncClientAppInsightsInstrumentationKey>

   <WindowsPhoneAppInsightsInstrumentationKey>$($settings.WindowsPhoneAppInsightsInstrumentationKey)</WindowsPhoneAppInsightsInstrumentationKey>

   <AsyncServerConnectorServiceAppInsightsInstrumentationKey>$($settings.AsyncServerConnectorServiceAppInsightsInstrumentationKey)</AsyncServerConnectorServiceAppInsightsInstrumentationKey>

   <RealtimeServiceAX63AppInsightsInstrumentationKey>$($settings.RealtimeServiceAX63AppInsightsInstrumentationKey)</RealtimeServiceAX63AppInsightsInstrumentationKey>"

   

   $methodInputXmlString =

   "<?xml version=`"1.0`" encoding=`"UTF-8`"?>

   <Configuration><RetargetRetail>

       $configureAsyncServiceSection

       $configureRealTimeServiceSection

       $configureChannelProfileSection

       $configureSelfServiceSection</RetargetRetail>

   </Configuration>"

   

   $methodInputXml = New-Object System.Xml.XmlDocument;

   $methodInputXml.LoadXml($methodInputXmlString);

   

   $methodInputXml.Save($methodInputXmlFilePath);

   

   $AXDeploymentSetupUtilityFilePath = Get-AXDeploymentUtilityFilesPath -AOSWebsitePhysicalPath $aosWebsitePhysicalPath -UtilityFileName 'Microsoft.Dynamics.AX.Deployment.Setup.exe'

   $parametersFromAosWebConfig = Get-RequisiteParametersFromAosWebConfig -AOSWebConfigFilePath $aosWebConfigFilePath

   

   $Global:LASTEXITCODE = 0

   # Call AX Deployment setup.

   Call-AXDeploymentSetupUtility -parametersFromAosWebConfig $parametersFromAosWebConfig `

                                 -methodInputXmlFilePath $methodInputXmlFilePath `

                                 -AXDeploymentSetupUtilityFilePath $AXDeploymentSetupUtilityFilePath `

                                 -className 'RetailServicingOrchestrator' `

                                 -methodName 'execute' `

                                 -LogFile $logFile

   

   $exitCode = $Global:LASTEXITCODE

 

   Log-TimedMessage ('Script ended with exit code {0}' -f $exitCode)

   if($exitCode -eq 0)

   {

       Write-Log "Retargeting completed successfully."

   }

   else

   {

       throw "Retargeting tool failed with exit code: $exitCode"

   }

#}

##catch

##{

##    Log-TimedMessage ($global:error[0] | format-list * -f | Out-String)

##    $ScriptLine = "{0}{1}" -f $MyInvocation.MyCommand.Path.ToString(), [System.Environment]::NewLine

##    $PSBoundParameters.Keys | % { $ScriptLine += "Parameter: {0} Value: {1}{2}" -f $_.ToString(), $PSBoundParameters[$_.ToString()], [System.Environment]::NewLine}

##    Log-TimedMessage ("Executed:{0}$ScriptLine{0}Exiting with error code $exitCode." -f [System.Environment]::NewLine)

##    throw "Retargeting failed, please use this wiki for trouble shooting: https://msazure.visualstudio.com/D365/Retail%20Team/_wiki?pagePath=%2FRetail-Team%2FLive-Site-and-Production%2FTSGs%2FTSGs-By-Component%2FCloud-Deployments%2FGeneral-Troubleshooting-Guide"

##}

#finally

#{

   if(![String]::IsNullOrWhiteSpace($methodInputXmlFilePath))

   {

       Remove-Item $methodInputXmlFilePath -Force -ErrorAction SilentlyContinue

   }

   & aspnet_regiis -pe "connectionStrings" -app "/" -Site $retailServerWebSite.Id

   Encrypt-WithAxConfigEncryptorUtility -AosWebsiteName $AosWebsiteName -webConfigPath $retailServerWebConfigFilePath

#}

# SIG # Begin signature block

# MIIoLAYJKoZIhvcNAQcCoIIoHTCCKBkCAQExDzANBglghkgBZQMEAgEFADB5Bgor

# BgEEAYI3AgEEoGswaTA0BgorBgEEAYI3AgEeMCYCAwEAAAQQH8w7YFlLCE63JNLG

# KX7zUQIBAAIBAAIBAAIBAAIBADAxMA0GCWCGSAFlAwQCAQUABCBTG+xtZuSJ8GER

# kdnUKUSLzUGwLFH4PvtB/iz1CtzIiqCCDXYwggX0MIID3KADAgECAhMzAAADTrU8

# esGEb+srAAAAAANOMA0GCSqGSIb3DQEBCwUAMH4xCzAJBgNVBAYTAlVTMRMwEQYD

# VQQIEwpXYXNoaW5ndG9uMRAwDgYDVQQHEwdSZWRtb25kMR4wHAYDVQQKExVNaWNy

# b3NvZnQgQ29ycG9yYXRpb24xKDAmBgNVBAMTH01pY3Jvc29mdCBDb2RlIFNpZ25p

# bmcgUENBIDIwMTEwHhcNMjMwMzE2MTg0MzI5WhcNMjQwMzE0MTg0MzI5WjB0MQsw

# CQYDVQQGEwJVUzETMBEGA1UECBMKV2FzaGluZ3RvbjEQMA4GA1UEBxMHUmVkbW9u

# ZDEeMBwGA1UEChMVTWljcm9zb2Z0IENvcnBvcmF0aW9uMR4wHAYDVQQDExVNaWNy

# b3NvZnQgQ29ycG9yYXRpb24wggEiMA0GCSqGSIb3DQEBAQUAA4IBDwAwggEKAoIB

# AQDdCKiNI6IBFWuvJUmf6WdOJqZmIwYs5G7AJD5UbcL6tsC+EBPDbr36pFGo1bsU

# p53nRyFYnncoMg8FK0d8jLlw0lgexDDr7gicf2zOBFWqfv/nSLwzJFNP5W03DF/1

# 1oZ12rSFqGlm+O46cRjTDFBpMRCZZGddZlRBjivby0eI1VgTD1TvAdfBYQe82fhm

# WQkYR/lWmAK+vW/1+bO7jHaxXTNCxLIBW07F8PBjUcwFxxyfbe2mHB4h1L4U0Ofa

# +HX/aREQ7SqYZz59sXM2ySOfvYyIjnqSO80NGBaz5DvzIG88J0+BNhOu2jl6Dfcq

# jYQs1H/PMSQIK6E7lXDXSpXzAgMBAAGjggFzMIIBbzAfBgNVHSUEGDAWBgorBgEE

# AYI3TAgBBggrBgEFBQcDAzAdBgNVHQ4EFgQUnMc7Zn/ukKBsBiWkwdNfsN5pdwAw

# RQYDVR0RBD4wPKQ6MDgxHjAcBgNVBAsTFU1pY3Jvc29mdCBDb3Jwb3JhdGlvbjEW

# MBQGA1UEBRMNMjMwMDEyKzUwMDUxNjAfBgNVHSMEGDAWgBRIbmTlUAXTgqoXNzci

# tW2oynUClTBUBgNVHR8ETTBLMEmgR6BFhkNodHRwOi8vd3d3Lm1pY3Jvc29mdC5j

# b20vcGtpb3BzL2NybC9NaWNDb2RTaWdQQ0EyMDExXzIwMTEtMDctMDguY3JsMGEG

# CCsGAQUFBwEBBFUwUzBRBggrBgEFBQcwAoZFaHR0cDovL3d3dy5taWNyb3NvZnQu

# Y29tL3BraW9wcy9jZXJ0cy9NaWNDb2RTaWdQQ0EyMDExXzIwMTEtMDctMDguY3J0

# MAwGA1UdEwEB/wQCMAAwDQYJKoZIhvcNAQELBQADggIBAD21v9pHoLdBSNlFAjmk

# mx4XxOZAPsVxxXbDyQv1+kGDe9XpgBnT1lXnx7JDpFMKBwAyIwdInmvhK9pGBa31

# TyeL3p7R2s0L8SABPPRJHAEk4NHpBXxHjm4TKjezAbSqqbgsy10Y7KApy+9UrKa2

# kGmsuASsk95PVm5vem7OmTs42vm0BJUU+JPQLg8Y/sdj3TtSfLYYZAaJwTAIgi7d

# hzn5hatLo7Dhz+4T+MrFd+6LUa2U3zr97QwzDthx+RP9/RZnur4inzSQsG5DCVIM

# pA1l2NWEA3KAca0tI2l6hQNYsaKL1kefdfHCrPxEry8onJjyGGv9YKoLv6AOO7Oh

# JEmbQlz/xksYG2N/JSOJ+QqYpGTEuYFYVWain7He6jgb41JbpOGKDdE/b+V2q/gX

# UgFe2gdwTpCDsvh8SMRoq1/BNXcr7iTAU38Vgr83iVtPYmFhZOVM0ULp/kKTVoir

# IpP2KCxT4OekOctt8grYnhJ16QMjmMv5o53hjNFXOxigkQWYzUO+6w50g0FAeFa8

# 5ugCCB6lXEk21FFB1FdIHpjSQf+LP/W2OV/HfhC3uTPgKbRtXo83TZYEudooyZ/A

# Vu08sibZ3MkGOJORLERNwKm2G7oqdOv4Qj8Z0JrGgMzj46NFKAxkLSpE5oHQYP1H

# tPx1lPfD7iNSbJsP6LiUHXH1MIIHejCCBWKgAwIBAgIKYQ6Q0gAAAAAAAzANBgkq

# hkiG9w0BAQsFADCBiDELMAkGA1UEBhMCVVMxEzARBgNVBAgTCldhc2hpbmd0b24x

# EDAOBgNVBAcTB1JlZG1vbmQxHjAcBgNVBAoTFU1pY3Jvc29mdCBDb3Jwb3JhdGlv

# bjEyMDAGA1UEAxMpTWljcm9zb2Z0IFJvb3QgQ2VydGlmaWNhdGUgQXV0aG9yaXR5

# IDIwMTEwHhcNMTEwNzA4MjA1OTA5WhcNMjYwNzA4MjEwOTA5WjB+MQswCQYDVQQG

# EwJVUzETMBEGA1UECBMKV2FzaGluZ3RvbjEQMA4GA1UEBxMHUmVkbW9uZDEeMBwG

# A1UEChMVTWljcm9zb2Z0IENvcnBvcmF0aW9uMSgwJgYDVQQDEx9NaWNyb3NvZnQg

# Q29kZSBTaWduaW5nIFBDQSAyMDExMIICIjANBgkqhkiG9w0BAQEFAAOCAg8AMIIC

# CgKCAgEAq/D6chAcLq3YbqqCEE00uvK2WCGfQhsqa+laUKq4BjgaBEm6f8MMHt03

# a8YS2AvwOMKZBrDIOdUBFDFC04kNeWSHfpRgJGyvnkmc6Whe0t+bU7IKLMOv2akr

# rnoJr9eWWcpgGgXpZnboMlImEi/nqwhQz7NEt13YxC4Ddato88tt8zpcoRb0Rrrg

# OGSsbmQ1eKagYw8t00CT+OPeBw3VXHmlSSnnDb6gE3e+lD3v++MrWhAfTVYoonpy

# 4BI6t0le2O3tQ5GD2Xuye4Yb2T6xjF3oiU+EGvKhL1nkkDstrjNYxbc+/jLTswM9

# sbKvkjh+0p2ALPVOVpEhNSXDOW5kf1O6nA+tGSOEy/S6A4aN91/w0FK/jJSHvMAh

# dCVfGCi2zCcoOCWYOUo2z3yxkq4cI6epZuxhH2rhKEmdX4jiJV3TIUs+UsS1Vz8k

# A/DRelsv1SPjcF0PUUZ3s/gA4bysAoJf28AVs70b1FVL5zmhD+kjSbwYuER8ReTB

# w3J64HLnJN+/RpnF78IcV9uDjexNSTCnq47f7Fufr/zdsGbiwZeBe+3W7UvnSSmn

# Eyimp31ngOaKYnhfsi+E11ecXL93KCjx7W3DKI8sj0A3T8HhhUSJxAlMxdSlQy90

# lfdu+HggWCwTXWCVmj5PM4TasIgX3p5O9JawvEagbJjS4NaIjAsCAwEAAaOCAe0w

# ggHpMBAGCSsGAQQBgjcVAQQDAgEAMB0GA1UdDgQWBBRIbmTlUAXTgqoXNzcitW2o

# ynUClTAZBgkrBgEEAYI3FAIEDB4KAFMAdQBiAEMAQTALBgNVHQ8EBAMCAYYwDwYD

# VR0TAQH/BAUwAwEB/zAfBgNVHSMEGDAWgBRyLToCMZBDuRQFTuHqp8cx0SOJNDBa

# BgNVHR8EUzBRME+gTaBLhklodHRwOi8vY3JsLm1pY3Jvc29mdC5jb20vcGtpL2Ny

# bC9wcm9kdWN0cy9NaWNSb29DZXJBdXQyMDExXzIwMTFfMDNfMjIuY3JsMF4GCCsG

# AQUFBwEBBFIwUDBOBggrBgEFBQcwAoZCaHR0cDovL3d3dy5taWNyb3NvZnQuY29t

# L3BraS9jZXJ0cy9NaWNSb29DZXJBdXQyMDExXzIwMTFfMDNfMjIuY3J0MIGfBgNV

# HSAEgZcwgZQwgZEGCSsGAQQBgjcuAzCBgzA/BggrBgEFBQcCARYzaHR0cDovL3d3

# dy5taWNyb3NvZnQuY29tL3BraW9wcy9kb2NzL3ByaW1hcnljcHMuaHRtMEAGCCsG

# AQUFBwICMDQeMiAdAEwAZQBnAGEAbABfAHAAbwBsAGkAYwB5AF8AcwB0AGEAdABl

# AG0AZQBuAHQALiAdMA0GCSqGSIb3DQEBCwUAA4ICAQBn8oalmOBUeRou09h0ZyKb

# C5YR4WOSmUKWfdJ5DJDBZV8uLD74w3LRbYP+vj/oCso7v0epo/Np22O/IjWll11l

# hJB9i0ZQVdgMknzSGksc8zxCi1LQsP1r4z4HLimb5j0bpdS1HXeUOeLpZMlEPXh6

# I/MTfaaQdION9MsmAkYqwooQu6SpBQyb7Wj6aC6VoCo/KmtYSWMfCWluWpiW5IP0

# wI/zRive/DvQvTXvbiWu5a8n7dDd8w6vmSiXmE0OPQvyCInWH8MyGOLwxS3OW560

# STkKxgrCxq2u5bLZ2xWIUUVYODJxJxp/sfQn+N4sOiBpmLJZiWhub6e3dMNABQam

# ASooPoI/E01mC8CzTfXhj38cbxV9Rad25UAqZaPDXVJihsMdYzaXht/a8/jyFqGa

# J+HNpZfQ7l1jQeNbB5yHPgZ3BtEGsXUfFL5hYbXw3MYbBL7fQccOKO7eZS/sl/ah

# XJbYANahRr1Z85elCUtIEJmAH9AAKcWxm6U/RXceNcbSoqKfenoi+kiVH6v7RyOA

# 9Z74v2u3S5fi63V4GuzqN5l5GEv/1rMjaHXmr/r8i+sLgOppO6/8MO0ETI7f33Vt

# Y5E90Z1WTk+/gFcioXgRMiF670EKsT/7qMykXcGhiJtXcVZOSEXAQsmbdlsKgEhr

# /Xmfwb1tbWrJUnMTDXpQzTGCGgwwghoIAgEBMIGVMH4xCzAJBgNVBAYTAlVTMRMw

# EQYDVQQIEwpXYXNoaW5ndG9uMRAwDgYDVQQHEwdSZWRtb25kMR4wHAYDVQQKExVN

# aWNyb3NvZnQgQ29ycG9yYXRpb24xKDAmBgNVBAMTH01pY3Jvc29mdCBDb2RlIFNp

# Z25pbmcgUENBIDIwMTECEzMAAANOtTx6wYRv6ysAAAAAA04wDQYJYIZIAWUDBAIB

# BQCgga4wGQYJKoZIhvcNAQkDMQwGCisGAQQBgjcCAQQwHAYKKwYBBAGCNwIBCzEO

# MAwGCisGAQQBgjcCARUwLwYJKoZIhvcNAQkEMSIEIFDgAXlhIIKuoHQNOn4zPySi

# CPkY4n5098oBwI14wtsbMEIGCisGAQQBgjcCAQwxNDAyoBSAEgBNAGkAYwByAG8A

# cwBvAGYAdKEagBhodHRwOi8vd3d3Lm1pY3Jvc29mdC5jb20wDQYJKoZIhvcNAQEB

# BQAEggEAaTKjuu/e+n6qe/pMiMx+RsNiewdBuUbMonJ+31H6XrQrElJiXYgSfPcy

# 8wYKo9/fqOzCGdXHplxnk3gJuj6cPyYKEkU5sSV4IGg71LY4zJ/mJTPiHBwIrTsN

# 1jdXS2w1+xVdC8mEI80604eAlOsaTI+4HzWkClDm3c5wGpPlrpd5BsHzK3iDJ9tu

# mBCe4qzJu8KG6iDiUtzAs+9Dsm+PH6vcom4MgoBrAZ1WFrIcHs4xsoihV53jhjwb

# 86r3E0fZCeZwO5Fce8Rn0dQPmQCE7t6IK0Nuk1aK1Lk/tBaADiapqp+I2XJRMcwR

# lZqvFFNdwxtdcaQqAf4COhSjlJ9uN6GCF5YwgheSBgorBgEEAYI3AwMBMYIXgjCC

# F34GCSqGSIb3DQEHAqCCF28wghdrAgEDMQ8wDQYJYIZIAWUDBAIBBQAwggFSBgsq

# hkiG9w0BCRABBKCCAUEEggE9MIIBOQIBAQYKKwYBBAGEWQoDATAxMA0GCWCGSAFl

# AwQCAQUABCACtE5qdGGlnVP4Wte53ONaUbb5ZyjSX0w8K4ScoN279AIGZQQZv/wK

# GBMyMDIzMTAwNDE3MDMzOS43NzdaMASAAgH0oIHRpIHOMIHLMQswCQYDVQQGEwJV

# UzETMBEGA1UECBMKV2FzaGluZ3RvbjEQMA4GA1UEBxMHUmVkbW9uZDEeMBwGA1UE

# ChMVTWljcm9zb2Z0IENvcnBvcmF0aW9uMSUwIwYDVQQLExxNaWNyb3NvZnQgQW1l

# cmljYSBPcGVyYXRpb25zMScwJQYDVQQLEx5uU2hpZWxkIFRTUyBFU046ODkwMC0w

# NUUwLUQ5NDcxJTAjBgNVBAMTHE1pY3Jvc29mdCBUaW1lLVN0YW1wIFNlcnZpY2Wg

# ghHsMIIHIDCCBQigAwIBAgITMwAAAdMdMpoXO0AwcwABAAAB0zANBgkqhkiG9w0B

# AQsFADB8MQswCQYDVQQGEwJVUzETMBEGA1UECBMKV2FzaGluZ3RvbjEQMA4GA1UE

# BxMHUmVkbW9uZDEeMBwGA1UEChMVTWljcm9zb2Z0IENvcnBvcmF0aW9uMSYwJAYD

# VQQDEx1NaWNyb3NvZnQgVGltZS1TdGFtcCBQQ0EgMjAxMDAeFw0yMzA1MjUxOTEy

# MjRaFw0yNDAyMDExOTEyMjRaMIHLMQswCQYDVQQGEwJVUzETMBEGA1UECBMKV2Fz

# aGluZ3RvbjEQMA4GA1UEBxMHUmVkbW9uZDEeMBwGA1UEChMVTWljcm9zb2Z0IENv

# cnBvcmF0aW9uMSUwIwYDVQQLExxNaWNyb3NvZnQgQW1lcmljYSBPcGVyYXRpb25z

# MScwJQYDVQQLEx5uU2hpZWxkIFRTUyBFU046ODkwMC0wNUUwLUQ5NDcxJTAjBgNV

# BAMTHE1pY3Jvc29mdCBUaW1lLVN0YW1wIFNlcnZpY2UwggIiMA0GCSqGSIb3DQEB

# AQUAA4ICDwAwggIKAoICAQC0jquTN4g1xbhXCc8MV+dOu8Uqc3KbbaWti5vdsAWM

# 1D4fVSi+4NWgGtP/BVRYrVj2oVnnMy0eazidQOJ4uUscBMbPHaMxaNpgbRG9FEQR

# FncAUptWnI+VPl53PD6MPL0yz8cHC2ZD3weF4w+uMDAGnL36Bkm0srONXvnM9eNv

# nG5djopEqiHodWSauRye4uftBR2sTwGHVmxKu0GS4fO87NgbJ4VGzICRyZXw9+Rv

# vXMG/jhM11H8AWKzKpn0oMGm1MSMeNvLUWb31HSZekx/NBEtXvmdo75OV030NHgI

# XihxYEeSgUIxfbI5OmgMq/VDCQp2r/fy/5NVa3KjCQoNqmmEM6orAJ2XKjYhEJzo

# p4nWCcJ970U6rXpBPK4XGNKBFhhLa74TM/ysTFIrEXOJG1fUuXfcdWb0Ex0FAeTT

# r6gmmCqreJNejNHffG/VEeF7LNvUquYFRndiCUhgy624rW6ptcnQTiRfE0QL/gLF

# 41kA2vZMYzcc16EiYXQQBaF3XAtMduh1dpXqTPPQEO3Ms5/5B/KtjhSspMcPUvRv

# b35IWN+q+L+zEwiphmnCGFTuyOMqc5QE0ruGN3Mx0Vv6x/hcOmaXxrHQGpNKI5Pn

# 79Yk89AclqU2mXHz1ZHWp+KBc3D6VP7L32JlwxhJx3asa085xv0XPD58MRW1WaGv

# aQIDAQABo4IBSTCCAUUwHQYDVR0OBBYEFNLHIIa4FAD494z35hvzCmm0415iMB8G

# A1UdIwQYMBaAFJ+nFV0AXmJdg/Tl0mWnG1M1GelyMF8GA1UdHwRYMFYwVKBSoFCG

# Tmh0dHA6Ly93d3cubWljcm9zb2Z0LmNvbS9wa2lvcHMvY3JsL01pY3Jvc29mdCUy

# MFRpbWUtU3RhbXAlMjBQQ0ElMjAyMDEwKDEpLmNybDBsBggrBgEFBQcBAQRgMF4w

# XAYIKwYBBQUHMAKGUGh0dHA6Ly93d3cubWljcm9zb2Z0LmNvbS9wa2lvcHMvY2Vy

# dHMvTWljcm9zb2Z0JTIwVGltZS1TdGFtcCUyMFBDQSUyMDIwMTAoMSkuY3J0MAwG

# A1UdEwEB/wQCMAAwFgYDVR0lAQH/BAwwCgYIKwYBBQUHAwgwDgYDVR0PAQH/BAQD

# AgeAMA0GCSqGSIb3DQEBCwUAA4ICAQBAYlhYoUQ+4aaQ54MFNfE6Ey8v4rWv+LtD

# RSjMM2X9g4uanA9cU7VitdpIPV/zE6v4AEhe/Vng2UAR5qj2SV3sz+fDqN6VLWUZ

# sKR0QR2JYXKnFPRVj16ezZyP7zd5H8IsvscEconeX+aRHF0xGGM4tDLrS84vj6Rm

# 0bgoWLXWnMTZ5kP4ownGmm0LsmInuu0GKrDZnkeTVmfk8gTTy8d1y3P2IYc2UI4i

# JYXCuSaKCuFeO0wqyscpvhGQSno1XAFK3oaybuD1mSoQxT9q77+LAGGQbiSoGlgT

# jQQayYsQaPcG1Q4QNwONGqkASCZTbzJlnmkHgkWlKSLTulOailWIY4hS1EZ+w+sX

# 0BJ9LcM142h51OlXLMoPLpzHAb6x22ipaAJ5Kf3uyFaOKWw4hnu0zWs+PKPd192n

# deK2ogWfaFdfnEvkWDDH2doL+ZA5QBd8Xngs/md3Brnll2BkZ/giZE/fKyolriR3

# aTAWCxFCXKIl/Clu2bbnj9qfVYLpAVQEcPaCfTAf7OZBlXmluETvq1Y/SNhxC6MJ

# 1QLCnkXSI//iXYpmRKT783QKRgmo/4ztj3uL9Z7xbbGxISg+P0HTRX15y4TReBbO

# 2RFNyCj88gOORk+swT1kaKXUfGB4zjg5XulxSby3uLNxQebE6TE3cAK0+fnY5UpH

# aEdlw4e7ijCCB3EwggVZoAMCAQICEzMAAAAVxedrngKbSZkAAAAAABUwDQYJKoZI

# hvcNAQELBQAwgYgxCzAJBgNVBAYTAlVTMRMwEQYDVQQIEwpXYXNoaW5ndG9uMRAw

# DgYDVQQHEwdSZWRtb25kMR4wHAYDVQQKExVNaWNyb3NvZnQgQ29ycG9yYXRpb24x

# MjAwBgNVBAMTKU1pY3Jvc29mdCBSb290IENlcnRpZmljYXRlIEF1dGhvcml0eSAy

# MDEwMB4XDTIxMDkzMDE4MjIyNVoXDTMwMDkzMDE4MzIyNVowfDELMAkGA1UEBhMC

# VVMxEzARBgNVBAgTCldhc2hpbmd0b24xEDAOBgNVBAcTB1JlZG1vbmQxHjAcBgNV

# BAoTFU1pY3Jvc29mdCBDb3Jwb3JhdGlvbjEmMCQGA1UEAxMdTWljcm9zb2Z0IFRp

# bWUtU3RhbXAgUENBIDIwMTAwggIiMA0GCSqGSIb3DQEBAQUAA4ICDwAwggIKAoIC

# AQDk4aZM57RyIQt5osvXJHm9DtWC0/3unAcH0qlsTnXIyjVX9gF/bErg4r25Phdg

# M/9cT8dm95VTcVrifkpa/rg2Z4VGIwy1jRPPdzLAEBjoYH1qUoNEt6aORmsHFPPF

# dvWGUNzBRMhxXFExN6AKOG6N7dcP2CZTfDlhAnrEqv1yaa8dq6z2Nr41JmTamDu6

# GnszrYBbfowQHJ1S/rboYiXcag/PXfT+jlPP1uyFVk3v3byNpOORj7I5LFGc6XBp

# Dco2LXCOMcg1KL3jtIckw+DJj361VI/c+gVVmG1oO5pGve2krnopN6zL64NF50Zu

# yjLVwIYwXE8s4mKyzbnijYjklqwBSru+cakXW2dg3viSkR4dPf0gz3N9QZpGdc3E

# XzTdEonW/aUgfX782Z5F37ZyL9t9X4C626p+Nuw2TPYrbqgSUei/BQOj0XOmTTd0

# lBw0gg/wEPK3Rxjtp+iZfD9M269ewvPV2HM9Q07BMzlMjgK8QmguEOqEUUbi0b1q

# GFphAXPKZ6Je1yh2AuIzGHLXpyDwwvoSCtdjbwzJNmSLW6CmgyFdXzB0kZSU2LlQ

# +QuJYfM2BjUYhEfb3BvR/bLUHMVr9lxSUV0S2yW6r1AFemzFER1y7435UsSFF5PA

# PBXbGjfHCBUYP3irRbb1Hode2o+eFnJpxq57t7c+auIurQIDAQABo4IB3TCCAdkw

# EgYJKwYBBAGCNxUBBAUCAwEAATAjBgkrBgEEAYI3FQIEFgQUKqdS/mTEmr6CkTxG

# NSnPEP8vBO4wHQYDVR0OBBYEFJ+nFV0AXmJdg/Tl0mWnG1M1GelyMFwGA1UdIARV

# MFMwUQYMKwYBBAGCN0yDfQEBMEEwPwYIKwYBBQUHAgEWM2h0dHA6Ly93d3cubWlj

# cm9zb2Z0LmNvbS9wa2lvcHMvRG9jcy9SZXBvc2l0b3J5Lmh0bTATBgNVHSUEDDAK

# BggrBgEFBQcDCDAZBgkrBgEEAYI3FAIEDB4KAFMAdQBiAEMAQTALBgNVHQ8EBAMC

# AYYwDwYDVR0TAQH/BAUwAwEB/zAfBgNVHSMEGDAWgBTV9lbLj+iiXGJo0T2UkFvX

# zpoYxDBWBgNVHR8ETzBNMEugSaBHhkVodHRwOi8vY3JsLm1pY3Jvc29mdC5jb20v

# cGtpL2NybC9wcm9kdWN0cy9NaWNSb29DZXJBdXRfMjAxMC0wNi0yMy5jcmwwWgYI

# KwYBBQUHAQEETjBMMEoGCCsGAQUFBzAChj5odHRwOi8vd3d3Lm1pY3Jvc29mdC5j

# b20vcGtpL2NlcnRzL01pY1Jvb0NlckF1dF8yMDEwLTA2LTIzLmNydDANBgkqhkiG

# 9w0BAQsFAAOCAgEAnVV9/Cqt4SwfZwExJFvhnnJL/Klv6lwUtj5OR2R4sQaTlz0x

# M7U518JxNj/aZGx80HU5bbsPMeTCj/ts0aGUGCLu6WZnOlNN3Zi6th542DYunKmC

# VgADsAW+iehp4LoJ7nvfam++Kctu2D9IdQHZGN5tggz1bSNU5HhTdSRXud2f8449

# xvNo32X2pFaq95W2KFUn0CS9QKC/GbYSEhFdPSfgQJY4rPf5KYnDvBewVIVCs/wM

# nosZiefwC2qBwoEZQhlSdYo2wh3DYXMuLGt7bj8sCXgU6ZGyqVvfSaN0DLzskYDS

# PeZKPmY7T7uG+jIa2Zb0j/aRAfbOxnT99kxybxCrdTDFNLB62FD+CljdQDzHVG2d

# Y3RILLFORy3BFARxv2T5JL5zbcqOCb2zAVdJVGTZc9d/HltEAY5aGZFrDZ+kKNxn

# GSgkujhLmm77IVRrakURR6nxt67I6IleT53S0Ex2tVdUCbFpAUR+fKFhbHP+Crvs

# QWY9af3LwUFJfn6Tvsv4O+S3Fb+0zj6lMVGEvL8CwYKiexcdFYmNcP7ntdAoGokL

# jzbaukz5m/8K6TT4JDVnK+ANuOaMmdbhIurwJ0I9JZTmdHRbatGePu1+oDEzfbzL

# 6Xu/OHBE0ZDxyKs6ijoIYn/ZcGNTTY3ugm2lBRDBcQZqELQdVTNYs6FwZvKhggNP

# MIICNwIBATCB+aGB0aSBzjCByzELMAkGA1UEBhMCVVMxEzARBgNVBAgTCldhc2hp

# bmd0b24xEDAOBgNVBAcTB1JlZG1vbmQxHjAcBgNVBAoTFU1pY3Jvc29mdCBDb3Jw

# b3JhdGlvbjElMCMGA1UECxMcTWljcm9zb2Z0IEFtZXJpY2EgT3BlcmF0aW9uczEn

# MCUGA1UECxMeblNoaWVsZCBUU1MgRVNOOjg5MDAtMDVFMC1EOTQ3MSUwIwYDVQQD

# ExxNaWNyb3NvZnQgVGltZS1TdGFtcCBTZXJ2aWNloiMKAQEwBwYFKw4DAhoDFQBS

# x23cMcNB1IQws/LYkRXa7I5JsKCBgzCBgKR+MHwxCzAJBgNVBAYTAlVTMRMwEQYD

# VQQIEwpXYXNoaW5ndG9uMRAwDgYDVQQHEwdSZWRtb25kMR4wHAYDVQQKExVNaWNy

# b3NvZnQgQ29ycG9yYXRpb24xJjAkBgNVBAMTHU1pY3Jvc29mdCBUaW1lLVN0YW1w

# IFBDQSAyMDEwMA0GCSqGSIb3DQEBCwUAAgUA6MejcjAiGA8yMDIzMTAwNDA4NDAx

# OFoYDzIwMjMxMDA1MDg0MDE4WjB2MDwGCisGAQQBhFkKBAExLjAsMAoCBQDox6Ny

# AgEAMAkCAQACAQMCAf8wBwIBAAICFP4wCgIFAOjI9PICAQAwNgYKKwYBBAGEWQoE

# AjEoMCYwDAYKKwYBBAGEWQoDAqAKMAgCAQACAwehIKEKMAgCAQACAwGGoDANBgkq

# hkiG9w0BAQsFAAOCAQEAP5fgyEPR6Ukuosx7xLVyaI16tY2vqur/79xFbtGxb36m

# ywv9vA2bgTqtUKCPCe+UqgEbRXCW0pMDx5q7nppJPhmLvgi6R6iYmdSgL4zuY3is

# FTyJaEUaIBq1JGnIaUxjGgX4Zrl3zcivjyGkVsGZHlE9gp5kS3RKaSnuzXw2c6Su

# 59kTojrmnUR4EyxOCC4rAcMFwukVTz1Fvm4jRHfwVDYUKPKi53ij8Q28MRUoxvSQ

# C0Cmbp3nt199cJBrvcQotdCLpvSPxGNzcn4d3UA3qL96wJ3SLyFjqcU/ozzZXFXh

# oll2kUe5befdb+C1PT3heiqHEU9v+BuQTpMASRGnlDGCBA0wggQJAgEBMIGTMHwx

# CzAJBgNVBAYTAlVTMRMwEQYDVQQIEwpXYXNoaW5ndG9uMRAwDgYDVQQHEwdSZWRt

# b25kMR4wHAYDVQQKExVNaWNyb3NvZnQgQ29ycG9yYXRpb24xJjAkBgNVBAMTHU1p

# Y3Jvc29mdCBUaW1lLVN0YW1wIFBDQSAyMDEwAhMzAAAB0x0ymhc7QDBzAAEAAAHT

# MA0GCWCGSAFlAwQCAQUAoIIBSjAaBgkqhkiG9w0BCQMxDQYLKoZIhvcNAQkQAQQw

# LwYJKoZIhvcNAQkEMSIEIBE/0sZtGXDTBi2A4zKemEIQpYS0W5wKIeeUiijPWWkA

# MIH6BgsqhkiG9w0BCRACLzGB6jCB5zCB5DCBvQQgkmb06sTg7k9YDUpoVrO2v24/

# 3qtCASf62Aa1jfE6qvUwgZgwgYCkfjB8MQswCQYDVQQGEwJVUzETMBEGA1UECBMK

# V2FzaGluZ3RvbjEQMA4GA1UEBxMHUmVkbW9uZDEeMBwGA1UEChMVTWljcm9zb2Z0

# IENvcnBvcmF0aW9uMSYwJAYDVQQDEx1NaWNyb3NvZnQgVGltZS1TdGFtcCBQQ0Eg

# MjAxMAITMwAAAdMdMpoXO0AwcwABAAAB0zAiBCDPuwh9jvLoORBydcsE59O7fnZC

# ok5kZMt6v16Yl9vIezANBgkqhkiG9w0BAQsFAASCAgBxbHRv0r88yWtigar2iTwG

# Z4Hr+k8wdDGO3jtVTeL1gUQHz8R2BGbC/PvgRoaTCpP6VtBgNfsQJerKRdXbJy2d

# 1UNb81OWFn9iOkwp9Wh52oaC1nZfFe6L6L/tDlMZdl+km/9/Fmf00DzRhonWc7yT

# FiQxMAy0905vnh/xz/Mjuz3txM7XX9eRO0qFA45SZwtETMxdxeN4Fy6PA2sLh5ws

# gWHREUhCgDHg6gpJMe3ShFm/R+ie9F+3Weh/W7F286fV5R1XenqmvJrBSf78AksX

# np3NxlzYJBSGBCQoJXjqCxwOCemSs2P0griFHQ1RLWpuSP1VH9uyqPEw3SmD33oQ

# HHbontSwgt6pPSw7ePvyflA9TUeHf0fbbRnO1I2BW39D1Nez2gYpAoV7tHhoY6kZ

# g87oAs2uFmjpjj4tsr1urCNUcnhJifB78trys7gom69Oxi2VavS5c1ozxtrhCT++

# tfeI64N+i7tMLbJjHKldJ75FIUH9VrUEbEPXSgiUPPn41jNuWT2ZBnQW47HOKfO0

# eHQoq+MIWx+YbB4Fw5/s7dKOQ6Mw+7GNJCiccnUJWW/4g4TVYXS0NXYAZ5h3HQ0b

# iMk1QuwPV7ob5Z/xiqIfprK/Cnvc9IuX/lUf2TB7Jx9b0BN3IIGv75lcdXtjJEx7

# GQoFuWCyLDu0bph38Vt/Eg==

# SIG # End signature block

